import os
import json
import requests
from flask import Flask, request
from binance.client import Client

app = Flask(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")                     # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
CHAT_ID = os.getenv("CHAT_ID")                     # ID —á–∞—Ç—É
BINANCE_KEY = os.getenv("BINANCE_KEY")             # Binance API Key (Testnet)
BINANCE_SECRET = os.getenv("BINANCE_SECRET")       # Binance Secret (Testnet)

# Binance –∫–ª—ñ—î–Ω—Ç (TESTNET)
client = Client(BINANCE_KEY, BINANCE_SECRET, testnet=True)
client.API_URL = 'https://testnet.binancefuture.com'

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
def send_telegram(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    requests.post(url, json=payload)

# Webhook –¥–ª—è TradingView
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("Content-Type") != "application/json":
        return "Unsupported Media Type", 415

    try:
        data = request.get_json(force=True)
        symbol = data.get("symbol", "BTCUSDT")
        entry_price = float(data.get("entry"))
        action = data.get("action", "LONG")
        timeframe = data.get("timeframe", "")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        balances = client.futures_account_balance()
        usdt_balance = next(item for item in balances if item['asset'] == 'USDT')
        usdt = float(usdt_balance['balance'])

        risk_percent = 1
        usd_amount = usdt * (risk_percent / 100)
        quantity = round(usd_amount / entry_price, 3)

        send_telegram(f"üìà {action} | {symbol} | TF: {timeframe}\nüí∞ Entry: {entry_price}\nüìä –û–±—Å—è–≥: {quantity} ({risk_percent}% –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É)")

        if quantity <= 0:
            raise Exception("–û–±—Å—è–≥ <= 0, –ø–µ—Ä–µ–≤—ñ—Ä –±–∞–ª–∞–Ω—Å")

        if action == "LONG":
            client.futures_create_order(symbol=symbol, side="BUY", type="MARKET", quantity=quantity)
            stop_price = round(entry_price * 0.92, 2)
            client.futures_create_order(
                symbol=symbol,
                side="SELL",
                type="STOP_MARKET",
                stopPrice=str(stop_price),
                closePosition=True
            )
            send_telegram(f"üöÄ LONG placed | SL set at {stop_price}")

        elif action == "SHORT":
            client.futures_create_order(symbol=symbol, side="SELL", type="MARKET", quantity=quantity)
            stop_price = round(entry_price * 1.08, 2)
            client.futures_create_order(
                symbol=symbol,
                side="BUY",
                type="STOP_MARKET",
                stopPrice=str(stop_price),
                closePosition=True
            )
            send_telegram(f"üîª SHORT placed | SL set at {stop_price}")

    except Exception as e:
        send_telegram(f"‚ö† Error: {e}")
    return "ok"

# –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ IP —Å–µ—Ä–≤–µ—Ä–∞
@app.route("/ip")
def show_ip():
    ip = requests.get("https://api.ipify.org").text
    return f"Render IP: {ip}"

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Flask
if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
